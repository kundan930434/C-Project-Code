#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

// Structure to represent a graph edge
struct Edge {
    int destination;
    int weight;
};

// Graph class
class Graph {
private:
    int vertices;
    vector<vector<Edge>> adjacencyList;

public:
    Graph(int v) : vertices(v) {
        adjacencyList.resize(v);
    }

    void addEdge(int source, int destination, int weight) {
        adjacencyList[source].push_back({destination, weight});
        adjacencyList[destination].push_back({source, weight}); // For undirected graph
    }

    void dijkstra(int start, int end) {
        vector<int> distance(vertices, numeric_limits<int>::max());
        distance[start] = 0;

        // Min-heap priority queue
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        pq.push({0, start});

        while (!pq.empty()) {
            int current = pq.top().second;
            pq.pop();

            for (auto& edge : adjacencyList[current]) {
                int neighbor = edge.destination;
                int weight = edge.weight;

                if (distance[current] + weight < distance[neighbor]) {
                    distance[neighbor] = distance[current] + weight;
                    pq.push({distance[neighbor], neighbor});
                }
            }
        }

        if (distance[end] == numeric_limits<int>::max()) {
            cout << "No available route from " << start << " to " << end << ".\n";
        } else {
            cout << "Shortest route from " << start << " to " << end << " is: " << distance[end] << " units.\n";
        }
    }
};

// Main function for testing
int main() {
    Graph graph(6); // Graph with 6 nodes

    // Add edges (source, destination, weight)
    graph.addEdge(0, 1, 7);
    graph.addEdge(0, 2, 9);
    graph.addEdge(0, 5, 14);
    graph.addEdge(1, 2, 10);
    graph.addEdge(1, 3, 15);
    graph.addEdge(2, 3, 11);
    graph.addEdge(2, 5, 2);
    graph.addEdge(3, 4, 6);
    graph.addEdge(4, 5, 9);

    int start, end;
    cout << "Enter start node (0-5): ";
    cin >> start;
    cout << "Enter end node (0-5): ";
    cin >> end;

    graph.dijkstra(start, end);

    return 0;
}
