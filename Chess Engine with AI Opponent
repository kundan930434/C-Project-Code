#include <iostream>
#include <vector>
#include <limits>

#define BOARD_SIZE 8

enum Piece { EMPTY, PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING };

struct Move {
    int fromX, fromY, toX, toY;
};

class ChessBoard {
public:
    Piece board[BOARD_SIZE][BOARD_SIZE];

    ChessBoard() {
        setupBoard();
    }

    void setupBoard() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = EMPTY;
            }
        }
        board[0][0] = board[0][7] = ROOK;
        board[0][1] = board[0][6] = KNIGHT;
        board[0][2] = board[0][5] = BISHOP;
        board[0][3] = QUEEN;
        board[0][4] = KING;
        for (int i = 0; i < BOARD_SIZE; i++) {
            board[1][i] = PAWN;
        }
    }

    void displayBoard() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                std::cout << board[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }

    std::vector<Move> generateMoves() {
        std::vector<Move> moves;
        // Placeholder: Only generate pawn forward moves
        for (int y = 0; y < BOARD_SIZE; y++) {
            for (int x = 0; x < BOARD_SIZE; x++) {
                if (board[y][x] == PAWN && y + 1 < BOARD_SIZE) {
                    moves.push_back({x, y, x, y + 1});
                }
            }
        }
        return moves;
    }

    void makeMove(Move move) {
        board[move.toY][move.toX] = board[move.fromY][move.fromX];
        board[move.fromY][move.fromX] = EMPTY;
    }
};

class AIPlayer {
public:
    Move chooseMove(ChessBoard& board) {
        std::vector<Move> moves = board.generateMoves();
        if (!moves.empty()) {
            return moves[0]; // Placeholder: Always picks the first move
        }
        return {-1, -1, -1, -1};
    }
};

int main() {
    ChessBoard board;
    AIPlayer ai;

    while (true) {
        board.displayBoard();
        Move aiMove = ai.chooseMove(board);
        if (aiMove.fromX == -1) {
            std::cout << "No more legal moves. Game Over.\n";
            break;
        }
        board.makeMove(aiMove);
        std::cout << "AI moved from (" << aiMove.fromX << ", " << aiMove.fromY << ") to (" << aiMove.toX << ", " << aiMove.toY << ")\n";
    }

    return 0;
}
