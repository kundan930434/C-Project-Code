#include <iostream>
#include <fstream>
#include <cstring>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080
#define BUFFER_SIZE 1024

void sendFile(int clientSocket, const char* filename) {
    std::ifstream file(filename, std::ios::binary);
    if (!file.is_open()) {
        std::cerr << "File not found." << std::endl;
        return;
    }

    char buffer[BUFFER_SIZE];
    while (!file.eof()) {
        file.read(buffer, BUFFER_SIZE);
        send(clientSocket, buffer, file.gcount(), 0);
    }
    file.close();
    std::cout << "File sent successfully." << std::endl;
}

void receiveFile(int serverSocket, const char* filename) {
    std::ofstream file(filename, std::ios::binary);
    if (!file.is_open()) {
        std::cerr << "Unable to create file." << std::endl;
        return;
    }

    char buffer[BUFFER_SIZE];
    int bytesRead;
    while ((bytesRead = recv(serverSocket, buffer, BUFFER_SIZE, 0)) > 0) {
        file.write(buffer, bytesRead);
    }
    file.close();
    std::cout << "File received successfully." << std::endl;
}

void serverMode(const char* filename) {
    int server_fd, clientSocket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);

    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    bind(server_fd, (struct sockaddr*)&address, sizeof(address));
    listen(server_fd, 3);
    std::cout << "Server is listening on port " << PORT << "..." << std::endl;

    clientSocket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen);
    sendFile(clientSocket, filename);
    close(clientSocket);
    close(server_fd);
}

void clientMode(const char* server_ip, const char* filename) {
    int sock = 0;
    struct sockaddr_in serv_addr;

    sock = socket(AF_INET, SOCK_STREAM, 0);
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    inet_pton(AF_INET, server_ip, &serv_addr.sin_addr);
    connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
    receiveFile(sock, filename);
    close(sock);
}

int main(int argc, char* argv[]) {
    if (argc < 3) {
        std::cerr << "Usage:\nServer: " << argv[0] << " server <filename>\nClient: " << argv[0] << " client <server_ip> <filename>" << std::endl;
        return 1;
    }

    std::string mode = argv[1];
    if (mode == "server") {
        serverMode(argv[2]);
    } else if (mode == "client" && argc == 4) {
        clientMode(argv[2], argv[3]);
    } else {
        std::cerr << "Invalid arguments." << std::endl;
        return 1;
    }

    return 0;
}
