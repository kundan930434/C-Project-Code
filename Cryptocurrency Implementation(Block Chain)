#include <iostream>
#include <vector>
#include <ctime>
#include <sstream>
#include <openssl/sha.h>

// Helper function to compute SHA-256 hash
std::string sha256(const std::string& data) {
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256((unsigned char*)data.c_str(), data.size(), hash);
    std::stringstream ss;
    for (unsigned char i : hash) {
        ss << std::hex << (int)i;
    }
    return ss.str();
}

// Block class
class Block {
public:
    int index;
    std::string previousHash;
    std::string timestamp;
    std::string data;
    std::string hash;
    int nonce;

    Block(int idx, std::string prevHash, std::string data) {
        index = idx;
        previousHash = prevHash;
        this->data = data;
        timestamp = std::to_string(std::time(nullptr));
        nonce = 0;
        hash = calculateHash();
    }

    std::string calculateHash() const {
        std::stringstream ss;
        ss << index << previousHash << timestamp << data << nonce;
        return sha256(ss.str());
    }

    void mineBlock(int difficulty) {
        std::string target(difficulty, '0');
        while (hash.substr(0, difficulty) != target) {
            nonce++;
            hash = calculateHash();
        }
        std::cout << "Block mined: " << hash << std::endl;
    }
};

// Blockchain class
class Blockchain {
public:
    std::vector<Block> chain;
    int difficulty;

    Blockchain() {
        difficulty = 4; // Number of leading zeros required in hash
        chain.push_back(createGenesisBlock());
    }

    Block createGenesisBlock() {
        return Block(0, "0", "Genesis Block");
    }

    Block getLatestBlock() {
        return chain.back();
    }

    void addBlock(Block newBlock) {
        newBlock.previousHash = getLatestBlock().hash;
        newBlock.mineBlock(difficulty);
        chain.push_back(newBlock);
    }

    bool isChainValid() {
        for (int i = 1; i < chain.size(); i++) {
            Block currentBlock = chain[i];
            Block previousBlock = chain[i - 1];

            if (currentBlock.hash != currentBlock.calculateHash()) {
                return false;
            }

            if (currentBlock.previousHash != previousBlock.hash) {
                return false;
            }
        }
        return true;
    }
};

int main() {
    Blockchain myCoin;

    std::cout << "Mining block 1..." << std::endl;
    myCoin.addBlock(Block(1, "", "Transaction: Alice -> Bob 10 Coins"));

    std::cout << "Mining block 2..." << std::endl;
    myCoin.addBlock(Block(2, "", "Transaction: Bob -> Charlie 5 Coins"));

    std::cout << "Is blockchain valid? " << (myCoin.isChainValid() ? "Yes" : "No") << std::endl;

    return 0;
}
