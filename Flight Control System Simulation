#include <iostream>
#include <cmath>
#include <thread>
#include <chrono>

class Aircraft {
public:
    double altitude;
    double speed;
    double heading;
    double latitude;
    double longitude;

    Aircraft() : altitude(10000), speed(250), heading(0), latitude(0), longitude(0) {}

    void updatePosition(double timeStep) {
        double distance = speed * timeStep / 3600; // Convert speed to km/h to distance in km
        double radHeading = heading * M_PI / 180;
        latitude += distance * std::cos(radHeading);
        longitude += distance * std::sin(radHeading);
    }

    void adjustAltitude(double targetAltitude) {
        if (altitude < targetAltitude) {
            altitude += 100; // Climb rate (feet per time step)
        } else if (altitude > targetAltitude) {
            altitude -= 100; // Descent rate
        }
    }

    void adjustSpeed(double targetSpeed) {
        if (speed < targetSpeed) {
            speed += 5; // Speed up
        } else if (speed > targetSpeed) {
            speed -= 5; // Slow down
        }
    }

    void adjustHeading(double targetHeading) {
        heading = fmod((heading + targetHeading), 360.0); // Adjust heading
    }

    void displayStatus() {
        std::cout << "Altitude: " << altitude << " ft, "
                  << "Speed: " << speed << " knots, "
                  << "Heading: " << heading << "Â°, "
                  << "Position: (" << latitude << ", " << longitude << ")" << std::endl;
    }
};

int main() {
    Aircraft plane;

    double targetAltitude = 35000; // Target altitude in feet
    double targetSpeed = 500;      // Target speed in knots
    double targetHeading = 90;     // Target heading in degrees

    for (int i = 0; i < 100; ++i) {
        plane.adjustAltitude(targetAltitude);
        plane.adjustSpeed(targetSpeed);
        plane.adjustHeading(1); // Gradually turn the aircraft
        plane.updatePosition(1); // Update position with 1-hour time step
        plane.displayStatus();

        std::this_thread::sleep_for(std::chrono::milliseconds(500)); // Simulate time delay
    }

    return 0;
}
