#include <iostream>
#include <queue>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <vector>
#include <chrono>

class Task {
public:
    int id;
    Task(int id) : id(id) {}
    void execute() {
        std::cout << "Executing Task " << id << "\n";
        std::this_thread::sleep_for(std::chrono::seconds(2)); // Simulate work
        std::cout << "Task " << id << " completed.\n";
    }
};

class TaskQueue {
private:
    std::queue<Task> tasks;
    std::mutex mtx;
    std::condition_variable cv;
public:
    void addTask(Task task) {
        std::lock_guard<std::mutex> lock(mtx);
        tasks.push(task);
        cv.notify_one();
    }

    Task getTask() {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, [this]() { return !tasks.empty(); });
        Task task = tasks.front();
        tasks.pop();
        return task;
    }
};

class Worker {
public:
    int id;
    TaskQueue& queue;
    Worker(int id, TaskQueue& q) : id(id), queue(q) {}
    void operator()() {
        while (true) {
            Task task = queue.getTask();
            std::cout << "Worker " << id << " picked up Task " << task.id << "\n";
            task.execute();
        }
    }
};

int main() {
    TaskQueue taskQueue;
    std::vector<std::thread> workers;

    // Create worker nodes
    for (int i = 0; i < 4; ++i) {
        workers.emplace_back(Worker(i + 1, taskQueue));
    }

    // Add tasks to the queue
    for (int i = 0; i < 10; ++i) {
        taskQueue.addTask(Task(i + 1));
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }

    for (auto& worker : workers) {
        worker.join();
    }

    return 0;
}
