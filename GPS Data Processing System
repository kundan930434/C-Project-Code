#include <iostream>
#include <string>
#include <sstream>
#include <cmath>

using namespace std;
double convertToDecimalDegrees(const string& coordinate, const string& direction) {
    double degrees = stod(coordinate.substr(0, 2));
    double minutes = stod(coordinate.substr(2));
    double decimal = degrees + (minutes / 60.0);

    if (direction == "S" || direction == "W") {
        decimal *= -1;
    }
    return decimal;
}


double haversine(double lat1, double lon1, double lat2, double lon2) {
    const double R = 6371.0;  // Radius of Earth in km
    double dLat = (lat2 - lat1) * M_PI / 180.0;
    double dLon = (lon2 - lon1) * M_PI / 180.0;

    lat1 = lat1 * M_PI / 180.0;
    lat2 = lat2 * M_PI / 180.0;

    double a = sin(dLat / 2) * sin(dLat / 2) +
               sin(dLon / 2) * sin(dLon / 2) * cos(lat1) * cos(lat2);
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));

    return R * c;  // Distance in km
}


void parseNMEA(const string& nmea) {
    if (nmea.substr(0, 6) != "$GPGGA") {
        cout << "Unsupported NMEA sentence." << endl;
        return;
    }

    stringstream ss(nmea);
    string token;
    vector<string> fields;

    while (getline(ss, token, ',')) {
        fields.push_back(token);
    }

    if (fields.size() >= 6) {
        double latitude = convertToDecimalDegrees(fields[2], fields[3]);
        double longitude = convertToDecimalDegrees(fields[4], fields[5]);
        cout << "Latitude: " << latitude << ", Longitude: " << longitude << endl;
    } else {
        cout << "Invalid NMEA sentence." << endl;
    }
}

int main() {
    string gpsData1 = "$GPGGA,123456.00,3723.2475,N,12158.3416,W,1,08,0.9,545.4,M,46.9,M,,*47";
    string gpsData2 = "$GPGGA,123457.00,3724.2475,N,12159.3416,W,1,08,0.9,545.4,M,46.9,M,,*48";

    parseNMEA(gpsData1);
    parseNMEA(gpsData2);

    // Calculate distance between two points
    double lat1 = 37.3874583, lon1 = -121.97236;
    double lat2 = 37.4041250, lon2 = -121.98903;

    double distance = haversine(lat1, lon1, lat2, lon2);
    cout << "Distance between points: " << distance << " km" << endl;

    return 0;
}
