#include <iostream>
#include <cmath>
#include <portaudio.h>

#define SAMPLE_RATE 44100
#define AMPLITUDE 0.5
#define FREQUENCY 440.0  // Default frequency (A4)

enum WaveType { SINE, SQUARE, SAWTOOTH };

struct SynthData {
    double phase;
    WaveType waveType;
};

// Audio callback function
static int audioCallback(const void* inputBuffer, void* outputBuffer,
                         unsigned long framesPerBuffer,
                         const PaStreamCallbackTimeInfo* timeInfo,
                         PaStreamCallbackFlags statusFlags,
                         void* userData) {
    SynthData* data = static_cast<SynthData*>(userData);
    float* out = static_cast<float*>(outputBuffer);
    double phaseIncrement = 2.0 * M_PI * FREQUENCY / SAMPLE_RATE;

    for (unsigned int i = 0; i < framesPerBuffer; ++i) {
        double sample = 0.0;

        // Generate different waveforms
        switch (data->waveType) {
            case SINE:
                sample = sin(data->phase);
                break;
            case SQUARE:
                sample = (sin(data->phase) > 0) ? 1.0 : -1.0;
                break;
            case SAWTOOTH:
                sample = 2.0 * (data->phase / (2.0 * M_PI)) - 1.0;
                break;
        }

        *out++ = static_cast<float>(AMPLITUDE * sample);
        data->phase += phaseIncrement;

        if (data->phase >= 2.0 * M_PI) {
            data->phase -= 2.0 * M_PI;
        }
    }
    return paContinue;
}

int main() {
    PaError err;
    SynthData synth = {0.0, SINE};  // Start with sine wave

    // Initialize PortAudio
    err = Pa_Initialize();
    if (err != paNoError) {
        std::cerr << "PortAudio error: " << Pa_GetErrorText(err) << std::endl;
        return 1;
    }

    // Open default stream
    PaStream* stream;
    err = Pa_OpenDefaultStream(&stream, 0, 1, paFloat32, SAMPLE_RATE, 256, audioCallback, &synth);
    if (err != paNoError) {
        std::cerr << "PortAudio error: " << Pa_GetErrorText(err) << std::endl;
        return 1;
    }

    // Start stream
    err = Pa_StartStream(stream);
    if (err != paNoError) {
        std::cerr << "PortAudio error: " << Pa_GetErrorText(err) << std::endl;
        return 1;
    }

    std::cout << "Playing sound. Press:\n1 - Sine Wave\n2 - Square Wave\n3 - Sawtooth Wave\nq - Quit\n";

    char choice;
    while (std::cin >> choice) {
        if (choice == '1') synth.waveType = SINE;
        else if (choice == '2') synth.waveType = SQUARE;
        else if (choice == '3') synth.waveType = SAWTOOTH;
        else if (choice == 'q') break;
    }

    // Stop stream
    Pa_StopStream(stream);
    Pa_CloseStream(stream);
    Pa_Terminate();

    return 0;
}
